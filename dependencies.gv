digraph {
node [style="filled", shape="ellipse", fillcolor="invis", fontcolor="black"];
0 -> 1  [label="Defines()"];
0 -> 2  [label="Defines()"];
0 -> 3  [label="Defines()"];
0 -> 4  [label="Defines()"];
1 -> 5  [label="Defines()"];
2 -> 6  [label="Defines()"];
2 -> 7  [label="Defines()"];
2 -> 7  [label="Calls()"];
3 -> 8  [label="Defines()"];
3 -> 8  [label="Calls()"];
4 -> 9  [label="Defines()"];
9 -> 5  [label="Calls()"];
7 -> 6  [label="Calls()"];
0 [label="ProjectNode(path=&#x27;workplace&#x27;)"fillcolor="#FFE9E9"];
1 [label="FileNode(path=PosixPath(&#x27;/Users/chaminduabeysekera/Documents/Projects/JAC/jacpilot/workplace/generate_fibonacci.py&#x27;), text=&#x27;class FibonacciGenerator:\n    @staticmethod\n    def generate_fibonacci(limit):\n        fibonacci_sequence = []\n        a, b = 0, 1\n        while a &lt;= limit:\n            fibonacci_sequence.append(a)\n            a, b = b, a + b\n        return fibonacci_sequence\n&#x27;)"fillcolor="#F0FFF0"];
2 [label="FileNode(path=PosixPath(&#x27;/Users/chaminduabeysekera/Documents/Projects/JAC/jacpilot/workplace/generate_prime_numbers.py&#x27;), text=&#x27;# Python script to generate prime numbers\n\ndef is_prime(num):\n    if num &lt; 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_prime_numbers(n):\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) &lt; n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers\n\n# Generate and print the first 10 prime numbers\nif __name__ == &quot;&quot;: \n    first_10_primes = generate_prime_numbers(10)\n    print(&quot;First 10 prime numbers:&quot;)\n    for number in first_10_primes:\n        print(number)&#x27;)"fillcolor="#F0FFF0"];
3 [label="FileNode(path=PosixPath(&#x27;/Users/chaminduabeysekera/Documents/Projects/JAC/jacpilot/workplace/generate_triangular_numbers.py&#x27;), text=&#x27;# Python script to generate the first 10 triangular numbers\n\ndef generate_triangular_numbers(n):\n    triangular_numbers = []\n    for i in range(1, n + 1):\n        triangular_number = (i * (i + 1)) // 2\n        triangular_numbers.append(triangular_number)\n    return triangular_numbers\n\n# Generate and print the first 10 triangular numbers\nif __name__ == &quot;&quot;: \n    first_10_triangular_numbers = generate_triangular_numbers(10)\n    print(&quot;First 10 triangular numbers:&quot;)\n    for number in first_10_triangular_numbers:\n        print(number)&#x27;)"fillcolor="#F0FFF0"];
4 [label="FileNode(path=PosixPath(&#x27;/Users/chaminduabeysekera/Documents/Projects/JAC/jacpilot/workplace/main.py&#x27;), text=&#x27;# Main script to call Fibonacci, Prime and Triangular methods\nfrom generate_fibonacci import FibonacciGenerator\nfrom generate_prime_numbers import generate_prime_numbers\n\ndef main():\n    fibonacci_sequence = FibonacciGenerator.generate_fibonacci(30)\n    print(fibonacci_sequence)\n&#x27;)"fillcolor="#F0FFF0"];
5 [label="ClassNode(name=&#x27;FibonacciGenerator&#x27;, start_point=Point(row=0, column=0), end_point=Point(row=8, column=33), name_point=Point(row=0, column=6), text=&#x27;class FibonacciGenerator:\n    @staticmethod\n    def generate_fibonacci(limit):\n        fibonacci_sequence = []\n        a, b = 0, 1\n        while a &lt;= limit:\n            fibonacci_sequence.append(a)\n            a, b = b, a + b\n        return fibonacci_sequence&#x27;, id=&#x27;90352523-d32a-4858-8b35-c67e651782ea&#x27;)"fillcolor="#F5E5FF"];
6 [label="FunctionNode(name=&#x27;is_prime&#x27;, start_point=Point(row=2, column=0), end_point=Point(row=8, column=15), name_point=Point(row=2, column=4), text=&#x27;def is_prime(num):\n    if num &lt; 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True&#x27;, id=&#x27;8ea79844-0fe5-42b6-b0cf-1cb5a913eaf5&#x27;)"fillcolor="#F5E5FF"];
7 [label="FunctionNode(name=&#x27;generate_prime_numbers&#x27;, start_point=Point(row=10, column=0), end_point=Point(row=17, column=24), name_point=Point(row=10, column=4), text=&#x27;def generate_prime_numbers(n):\n    prime_numbers = []\n    num = 2\n    while len(prime_numbers) &lt; n:\n        if is_prime(num):\n            prime_numbers.append(num)\n        num += 1\n    return prime_numbers&#x27;, id=&#x27;f19c5e2a-9087-475e-ab77-c658b4658dc7&#x27;)"fillcolor="#F5E5FF"];
8 [label="FunctionNode(name=&#x27;generate_triangular_numbers&#x27;, start_point=Point(row=2, column=0), end_point=Point(row=7, column=29), name_point=Point(row=2, column=4), text=&#x27;def generate_triangular_numbers(n):\n    triangular_numbers = []\n    for i in range(1, n + 1):\n        triangular_number = (i * (i + 1)) // 2\n        triangular_numbers.append(triangular_number)\n    return triangular_numbers&#x27;, id=&#x27;d19c8161-e851-49b6-aa9f-c80e8dcec2b6&#x27;)"fillcolor="#F5E5FF"];
9 [label="FunctionNode(name=&#x27;main&#x27;, start_point=Point(row=4, column=0), end_point=Point(row=6, column=29), name_point=Point(row=4, column=4), text=&#x27;def main():\n    fibonacci_sequence = FibonacciGenerator.generate_fibonacci(30)\n    print(fibonacci_sequence)&#x27;, id=&#x27;b2defa2b-ce8c-4b82-8063-bcc1c287bc2f&#x27;)"fillcolor="#F5E5FF"];
}